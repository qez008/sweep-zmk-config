/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#undef ZMK_BEHAVIORS_KEEP_ALL

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        minus {
            bindings = <&kp MINUS>;
            key-positions = <3 6>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <23 26>;
        };

        caps-word {
            bindings = <&caps_word>;
            key-positions = <20 29>;
        };

        reset-right {
            bindings = <&bootloader>;
            key-positions = <6 7 8>;
        };

        reset-left {
            bindings = <&bootloader>;
            key-positions = <1 2 3 1 2 3>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <4 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W        &kp F           &kp P           &kp G                         &kp J                       &kp L            &kp U            &kp Y        &kp SEMI
&hm LEFT_SHIFT A  &hm LCTRL R  &hm LEFT_ALT S  &hm LEFT_GUI T  &hm LS(LA(LC(LEFT_GUI))) D    &hm RS(RC(RA(LEFT_GUI))) H  &hm RIGHT_GUI N  &hm RIGHT_ALT E  &hm RCTRL I  &hm RIGHT_SHIFT O
&kp Z             &kp X        &kp C           &kp V           &kp B                         &kp K                       &kp M            &kp COMMA        &kp DOT      &kp SLASH
                                               &lt 3 TAB       &lt 1 ENTER                   &lt 2 SPACE                 &kp BACKSPACE
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp PAGE_UP    &kp LBRC  &kp RBRC  &kp LPAR   &kp RPAR
&trans  &trans  &trans  &trans  &trans    &kp LEFT       &kp DOWN  &kp UP    &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &kp LBKT  &kp RBKT  &kp LT     &kp GT
                        &trans  &trans    &trans         &trans
            >;
        };

        SYM {
            bindings = <
&trans     &trans     &kp ASTRK  &kp AMPS  &trans      &trans  &trans  &trans  &trans  &trans
&kp DQT    &kp CARET  &kp PRCNT  &kp DLLR  &kp PLUS    &trans  &trans  &trans  &trans  &trans
&kp TILDE  &kp HASH   &kp AT     &kp EXCL  &kp PIPE    &trans  &trans  &trans  &trans  &trans
                                 &trans    &trans      &trans  &trans
            >;
        };

        NUM {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans
                        &trans  &trans    &kp N0  &trans
            >;
        };

        MEDIA {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &kp C_MUTE  &kp C_VOL_DN      &kp C_VOL_UP  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT    &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans            &trans        &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav_sym {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
